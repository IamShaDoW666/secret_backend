name: Build and Push Docker Image

on:
  push:
    branches:
      - main # Trigger this workflow on pushes to the main branch

env:
  # Define environment variables for the registry and image name
  REGISTRY: ghcr.io # Use ghcr.io for GitHub Container Registry
  IMAGE_NAME: ${{ github.repository }} # Uses your GitHub repository name as the image name

jobs:
  build-and-push:
    runs-on: ubuntu-latest # Use a fresh Ubuntu runner

    permissions:
      contents: read # Allows checkout of repository code
      packages: write # Required to push images to GitHub Container Registry

    steps:
      - name: Checkout repository
        # Action to checkout your code from the repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        # Action to log in to the specified container registry (GHCR in this case)
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }} # Uses the GitHub username that triggered the workflow
          password: ${{ secrets.GITHUB_TOKEN }} # Uses the automatically generated GitHub token for authentication

      - name: Extract metadata (tags, labels) for Docker
        # This action helps in generating dynamic tags for your Docker image
        # It can create tags based on branch name, commit SHA, etc.
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} # Full image name including registry
          tags: |
            type=raw,value=latest # Always tag with 'latest'
            type=sha,format=short # Tag with a short commit SHA (e.g., abcdefg)
            type=ref,event=branch # Tag with branch name (e.g., main)
            type=semver,pattern=v{{version}} # If you use semantic versioning tags (e.g., v1.0.0)

      - name: Build and push Docker image
        # This action builds your Docker image and pushes it to the registry
        uses: docker/build-push-action@v5
        with:
          context: . # The build context is the current directory (where your Dockerfile is)
          push: true # Set to true to push the image to the registry
          tags: ${{ steps.meta.outputs.tags }} # Use the tags generated by the metadata action
          labels: ${{ steps.meta.outputs.labels }} # Use the labels generated by the metadata action
          # If your Dockerfile is not in the root, specify it:
          # file: ./path/to/your/Dockerfile
          # If you have build arguments:
          # build-args: |
          #   MY_ARG=value

      - name: Verify pushed image (optional)
        # You can add a step to pull the image back to verify it was pushed correctly
        run: docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
